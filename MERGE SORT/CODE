#include<stdio.h>
#include<stdlib.h>
#include<omp.h>
#include<time.h>
void simple_merge(int a[],int low,int mid,int high);
void merge_sort(int a[],int low,int high);
void main()
{
int a[500],i,n;
double startTime,endTime;
printf("=========== Parallelized Merge Sort ==========\n");
printf("Enter the number of elements\n");
scanf("%d",&n);
for(i=0;i<n;i++)
{
a[i]=rand()%1000;
}
printf("\n The random numbers generated are:\n");
for(i=0;i<n;i++)
printf("%d\t",a[i]);
startTime=clock();
merge_sort(a,0,n-1);
endTime = clock();
printf("\n\nTime taken is %f\n",(((double)(endTime-startTime))/CLOCKS_PER_SEC));
printf("\nThe sorted elements are:\n");
for(i=0;i<n;i++)
printf("%d\t",a[i]);
}
void simple_merge(int a[],int low,int mid,int high)
{
int i=low,j=mid+1,k=low,c[500];
while(i<=mid && j<=high)
{
if(a[i]<a[j])
{
c[k]=a[i];
i++;
k++;
}
else
{
c[k]=a[j];
j++;
k++;
}
}
while(i<=mid)
c[k++]=a[i++];
while(j<=high)
c[k++]=a[j++];
for(i=low;i<=high;i++)
a[i]=c[i];
}
void merge_sort(int a[],int low,int high)
{
int mid;
if(low<high)
{
 mid=(low+high)/2;
 #pragma omp parallel sections
 {
 #pragma omp section
merge_sort(a,low,mid);
 #pragma omp section
 merge_sort(a,mid+1,high);
}
simple_merge(a,low,mid,high);
}
}
